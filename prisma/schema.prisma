// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    email        String         @unique
    password     String
    RefreshToken RefreshToken[]
    Budget       Budget[]
    Category     Category[]

    @@map("users")
}

model RefreshToken {
    id     String @id @default(uuid())
    token  String @unique
    userId String @unique

    expiryDate DateTime

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("refresh_tokens")
}

model Budget {
    id     String  @id @default(uuid())
    userId String
    amount Decimal

    user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    Transaction Transaction[]
}

model Category {
    id     String @id @default(uuid())
    userId String
    name   String

    user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    Transaction Transaction[]

    @@map("categories")
}

model Transaction {
    id         String @id @default(uuid())
    budgetId   String
    categoryId String

    amount      Decimal
    description String?
    transactionType TransactionType

    date_transaction DateTime

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    budget   Budget   @relation(fields: [budgetId], references: [id], onDelete: Cascade)
    category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

enum TransactionType {
    INCOME
    EXPENSE
}